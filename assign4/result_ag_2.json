MongoDB shell version v4.4.1
connecting to: mongodb://127.0.0.1:27017/nbd?compressors=disabled&gssapiServiceName=mongodb
Implicit session: session { "id" : UUID("eda3b243-92ab-4987-a9f3-889ced4f0c73") }
MongoDB server version: 4.4.1
{
	"_batch" : [
		{
			"_id" : "HUF",
			"sum" : 0,
			"count" : 115
		},
		{
			"_id" : "DOP",
			"sum" : 0,
			"count" : 315
		},
		{
			"_id" : "KWD",
			"sum" : 0,
			"count" : 50
		},
		{
			"_id" : "GHS",
			"sum" : 0,
			"count" : 60
		},
		{
			"_id" : "HNL",
			"sum" : 0,
			"count" : 455
		},
		{
			"_id" : "IQD",
			"sum" : 0,
			"count" : 100
		},
		{
			"_id" : "MKD",
			"sum" : 0,
			"count" : 240
		},
		{
			"_id" : "BBD",
			"sum" : 0,
			"count" : 5
		},
		{
			"_id" : "TTD",
			"sum" : 0,
			"count" : 25
		},
		{
			"_id" : "GYD",
			"sum" : 0,
			"count" : 15
		},
		{
			"_id" : "AWG",
			"sum" : 0,
			"count" : 10
		},
		{
			"_id" : "TOP",
			"sum" : 0,
			"count" : 5
		},
		{
			"_id" : "DZD",
			"sum" : 0,
			"count" : 10
		},
		{
			"_id" : "IRR",
			"sum" : 0,
			"count" : 510
		},
		{
			"_id" : "GNF",
			"sum" : 0,
			"count" : 45
		},
		{
			"_id" : "INR",
			"sum" : 0,
			"count" : 15
		},
		{
			"_id" : "SAR",
			"sum" : 0,
			"count" : 85
		},
		{
			"_id" : "BOB",
			"sum" : 0,
			"count" : 160
		},
		{
			"_id" : "MNT",
			"sum" : 0,
			"count" : 385
		},
		{
			"_id" : "ISK",
			"sum" : 0,
			"count" : 15
		},
		{
			"_id" : "KYD",
			"sum" : 0,
			"count" : 5
		},
		{
			"_id" : "MRO",
			"sum" : 0,
			"count" : 30
		},
		{
			"_id" : "AMD",
			"sum" : 0,
			"count" : 355
		},
		{
			"_id" : "RON",
			"sum" : 0,
			"count" : 5
		},
		{
			"_id" : "LTL",
			"sum" : 0,
			"count" : 125
		},
		{
			"_id" : "LRD",
			"sum" : 0,
			"count" : 45
		},
		{
			"_id" : "NAD",
			"sum" : 0,
			"count" : 30
		},
		{
			"_id" : "NIO",
			"sum" : 0,
			"count" : 135
		},
		{
			"_id" : "MDL",
			"sum" : 0,
			"count" : 85
		},
		{
			"_id" : "MYR",
			"sum" : 0,
			"count" : 415
		},
		{
			"_id" : "BTN",
			"sum" : 0,
			"count" : 20
		},
		{
			"_id" : "BDT",
			"sum" : 0,
			"count" : 160
		},
		{
			"_id" : "SEK",
			"sum" : 0,
			"count" : 2190
		},
		{
			"_id" : "CNY",
			"sum" : 0,
			"count" : 16765
		},
		{
			"_id" : "MMK",
			"sum" : 0,
			"count" : 130
		},
		{
			"_id" : "FKP",
			"sum" : 0,
			"count" : 5
		},
		{
			"_id" : "LSL",
			"sum" : 0,
			"count" : 20
		},
		{
			"_id" : "AFN",
			"sum" : 0,
			"count" : 435
		},
		{
			"_id" : "BND",
			"sum" : 0,
			"count" : 5
		},
		{
			"_id" : "ZWL",
			"sum" : 0,
			"count" : 90
		},
		{
			"_id" : "FJD",
			"sum" : 0,
			"count" : 5
		},
		{
			"_id" : "KPW",
			"sum" : 0,
			"count" : 140
		},
		{
			"_id" : "EGP",
			"sum" : 0,
			"count" : 295
		},
		{
			"_id" : "NPR",
			"sum" : 0,
			"count" : 100
		},
		{
			"_id" : "HKD",
			"sum" : 0,
			"count" : 15
		},
		{
			"_id" : "EUR",
			"sum" : 0,
			"count" : 10625
		},
		{
			"_id" : "BWP",
			"sum" : 0,
			"count" : 75
		},
		{
			"_id" : "UYU",
			"sum" : 0,
			"count" : 150
		},
		{
			"_id" : "NGN",
			"sum" : 0,
			"count" : 875
		},
		{
			"_id" : "BRL",
			"sum" : 0,
			"count" : 3630
		},
		{
			"_id" : "IDR",
			"sum" : 0,
			"count" : 9785
		},
		{
			"_id" : "CZK",
			"sum" : 0,
			"count" : 1605
		},
		{
			"_id" : "BZD",
			"sum" : 0,
			"count" : 5
		},
		{
			"_id" : "TRY",
			"sum" : 0,
			"count" : 15
		},
		{
			"_id" : "MAD",
			"sum" : 0,
			"count" : 285
		},
		{
			"_id" : "VUV",
			"sum" : 0,
			"count" : 10
		},
		{
			"_id" : "CHF",
			"sum" : 0,
			"count" : 65
		},
		{
			"_id" : "XPF",
			"sum" : 0,
			"count" : 80
		},
		{
			"_id" : "TMT",
			"sum" : 0,
			"count" : 55
		},
		{
			"_id" : "KZT",
			"sum" : 0,
			"count" : 400
		},
		{
			"_id" : "DKK",
			"sum" : 0,
			"count" : 130
		},
		{
			"_id" : "TWD",
			"sum" : 0,
			"count" : 25
		},
		{
			"_id" : "CUP",
			"sum" : 0,
			"count" : 345
		},
		{
			"_id" : "XOF",
			"sum" : 0,
			"count" : 600
		},
		{
			"_id" : "SDG",
			"sum" : 0,
			"count" : 75
		},
		{
			"_id" : "AED",
			"sum" : 0,
			"count" : 25
		},
		{
			"_id" : "MVR",
			"sum" : 0,
			"count" : 20
		},
		{
			"_id" : "AOA",
			"sum" : 0,
			"count" : 50
		},
		{
			"_id" : "MZN",
			"sum" : 0,
			"count" : 50
		},
		{
			"_id" : "KMF",
			"sum" : 0,
			"count" : 70
		},
		{
			"_id" : "JMD",
			"sum" : 0,
			"count" : 120
		},
		{
			"_id" : "CAD",
			"sum" : 0,
			"count" : 1155
		},
		{
			"_id" : "BAM",
			"sum" : 0,
			"count" : 220
		},
		{
			"_id" : "TZS",
			"sum" : 0,
			"count" : 385
		},
		{
			"_id" : "XAF",
			"sum" : 0,
			"count" : 450
		},
		{
			"_id" : "MOP",
			"sum" : 0,
			"count" : 5
		},
		{
			"_id" : "XCD",
			"sum" : 0,
			"count" : 95
		},
		{
			"_id" : "UGX",
			"sum" : 0,
			"count" : 220
		},
		{
			"_id" : "LAK",
			"sum" : 0,
			"count" : 60
		},
		{
			"_id" : "BYR",
			"sum" : 0,
			"count" : 405
		},
		{
			"_id" : "USD",
			"sum" : 0,
			"count" : 2510
		},
		{
			"_id" : "CVE",
			"sum" : 0,
			"count" : 30
		},
		{
			"_id" : "ERN",
			"sum" : 0,
			"count" : 10
		},
		{
			"_id" : "GTQ",
			"sum" : 0,
			"count" : 375
		},
		{
			"_id" : "VEF",
			"sum" : 0,
			"count" : 300
		},
		{
			"_id" : "STD",
			"sum" : 0,
			"count" : 5
		},
		{
			"_id" : "GBP",
			"sum" : 0,
			"count" : 150
		},
		{
			"_id" : "MXN",
			"sum" : 0,
			"count" : 925
		},
		{
			"_id" : "RWF",
			"sum" : 0,
			"count" : 30
		},
		{
			"_id" : "MUR",
			"sum" : 0,
			"count" : 135
		},
		{
			"_id" : "ALL",
			"sum" : 0,
			"count" : 395
		},
		{
			"_id" : "DJF",
			"sum" : 0,
			"count" : 10
		},
		{
			"_id" : "SBD",
			"sum" : 0,
			"count" : 5
		},
		{
			"_id" : "RUB",
			"sum" : 0,
			"count" : 5205
		},
		{
			"_id" : "GEL",
			"sum" : 0,
			"count" : 95
		},
		{
			"_id" : "JPY",
			"sum" : 0,
			"count" : 1615
		},
		{
			"_id" : "SGD",
			"sum" : 0,
			"count" : 10
		},
		{
			"_id" : "SSP",
			"sum" : 0,
			"count" : 40
		},
		{
			"_id" : "LKR",
			"sum" : 0,
			"count" : 145
		},
		{
			"_id" : "ZAR",
			"sum" : 0,
			"count" : 600
		},
		{
			"_id" : "TND",
			"sum" : 0,
			"count" : 155
		}
	],
	"_useReadCommands" : true,
	"_cursorid" : NumberLong("4475198743139660242"),
	"_batchSize" : undefined,
	"_maxAwaitTimeMS" : undefined,
	"_txnNumber" : undefined,
	"_ns" : "nbd.people",
	"_db" : nbd,
	"_collName" : "people",
	"_cursorHandle" : {
		
	},
	"isClosed" : function() {
    if (this._useReadCommands) {
        return bsonWoCompare({_: this._cursorid}, {_: NumberLong(0)}) === 0;
    }
    return this._cursor.isClosed();
},
	"isExhausted" : function() {
    return this.isClosed() && this.objsLeftInBatch() === 0;
},
	"close" : function() {
    if (!this._useReadCommands) {
        this._cursor.close();
    } else if (bsonWoCompare({_: this._cursorid}, {_: NumberLong(0)}) !== 0) {
        var killCursorCmd = {
            killCursors: this._collName,
            cursors: [this._cursorid],
        };
        var cmdRes = this._db.runCommand(killCursorCmd);
        if (cmdRes.ok != 1) {
            throw _getErrorWithCode(cmdRes, "killCursors command failed: " + tojson(cmdRes));
        }

        this._cursorHandle.zeroCursorId();
        this._cursorid = NumberLong(0);
    }
},
	"_updatePostBatchResumeToken" : function(cursorObj) {
    if (cursorObj.postBatchResumeToken) {
        this._postBatchResumeToken = cursorObj.postBatchResumeToken;
        if ((cursorObj.firstBatch || cursorObj.nextBatch).length === 0) {
            this._resumeToken = this._postBatchResumeToken;
        }
        this._isChangeStream = true;
    }
},
	"_runGetMoreCommand" : function() {
    // Construct the getMore command.
    var getMoreCmd = {getMore: this._cursorid, collection: this._collName};

    if (this._batchSize) {
        getMoreCmd["batchSize"] = this._batchSize;
    }

    // maxAwaitTimeMS is only supported when using read commands.
    if (this._maxAwaitTimeMS) {
        getMoreCmd.maxTimeMS = this._maxAwaitTimeMS;
    }

    if (this._txnNumber) {
        getMoreCmd.txnNumber = NumberLong(this._txnNumber);
        getMoreCmd.autocommit = false;
    }

    // Deliver the getMore command, and check for errors in the response.
    var cmdRes = this._db.runCommand(getMoreCmd);
    assert.commandWorked(cmdRes, () => "getMore command failed: " + tojson(cmdRes));

    if (this._ns !== cmdRes.cursor.ns) {
        throw Error("unexpected collection in getMore response: " + this._ns +
                    " != " + cmdRes.cursor.ns);
    }

    if (!cmdRes.cursor.id.compare(NumberLong("0"))) {
        this._cursorHandle.zeroCursorId();
        this._cursorid = NumberLong("0");
    } else if (this._cursorid.compare(cmdRes.cursor.id)) {
        throw Error("unexpected cursor id: " + this._cursorid.toString() +
                    " != " + cmdRes.cursor.id.toString());
    }

    // If the command result represents a change stream cursor, update our postBatchResumeToken.
    this._updatePostBatchResumeToken(cmdRes.cursor);

    // Successfully retrieved the next batch.
    this._batch = cmdRes.cursor.nextBatch.reverse();
},
	"_hasNextUsingCommands" : function() {
    assert(this._useReadCommands);

    if (!this._batch.length) {
        if (!this._cursorid.compare(NumberLong("0"))) {
            return false;
        }

        this._runGetMoreCommand();
    }

    return this._batch.length > 0;
},
	"hasNext" : function() {
    if (this._useReadCommands) {
        return this._hasNextUsingCommands();
    }

    return this._batch.length || this._cursor.hasNext();
},
	"next" : function() {
    if (this._batch.length) {
        // Pop the next result off the batch.
        const nextDoc = this._batch.pop();
        if (this._isChangeStream) {
            // If this is the last result in the batch, the postBatchResumeToken becomes the current
            // resume token for the cursor. Otherwise, the resume token is the _id of 'nextDoc'.
            this._resumeToken = (this._batch.length ? nextDoc._id : this._postBatchResumeToken);
        }
        return nextDoc;
    } else if (this._useReadCommands) {
        // Have to call hasNext() here, as this is where we may issue a getMore in order to retrieve
        // the next batch of results.
        if (!this.hasNext())
            throw Error("error hasNext: false");
        return this._batch.pop();
    } else {
        if (!this._cursor.hasNext())
            throw Error("error hasNext: false");

        var ret = this._cursor.next();
        if (ret.$err)
            throw _getErrorWithCode(ret, "error: " + tojson(ret));
        return ret;
    }
},
	"objsLeftInBatch" : function() {
    if (this._useReadCommands) {
        return this._batch.length;
    } else if (this._batch.length) {
        return this._batch.length;
    } else {
        return this._cursor.objsLeftInBatch();
    }
},
	"getId" : function() {
    return this._cursorid;
},
	"getResumeToken" : function() {
    // Return the most recent recorded resume token, if such a token exists.
    return this._resumeToken;
},
	"help" : function() {
    // This is the same as the "Cursor Methods" section of DBQuery.help().
    print("\nCursor methods");
    print("\t.toArray() - iterates through docs and returns an array of the results");
    print("\t.forEach( func )");
    print("\t.map( func )");
    print("\t.hasNext()");
    print("\t.next()");
    print(
        "\t.objsLeftInBatch() - returns count of docs left in current batch (when exhausted, a new getMore will be issued)");
    print("\t.itcount() - iterates through documents and counts them");
    print(
        "\t.getResumeToken() - for a change stream cursor, obtains the most recent valid resume token, if it exists.");
    print("\t.pretty() - pretty print each document, possibly over multiple lines");
    print("\t.close()");
},
	"toArray" : function() {
    if (this._arr)
        return this._arr;

    var a = [];
    while (this.hasNext())
        a.push(this.next());
    this._arr = a;
    return a;
},
	"forEach" : function(func) {
    while (this.hasNext())
        func(this.next());
},
	"map" : function(func) {
    var a = [];
    while (this.hasNext())
        a.push(func(this.next()));
    return a;
},
	"itcount" : function() {
    var num = 0;

    // Track how many bytes we've used this cursor to iterate iterated.  This function can be called
    // with some very large cursors.  SpiderMonkey appears happy to allow these objects to
    // accumulate, so regular gc() avoids an overly large memory footprint.
    //
    // TODO: migrate this function into c++
    var bytesSinceGC = 0;

    while (this.hasNext()) {
        num++;
        var nextDoc = this.next();
        bytesSinceGC += Object.bsonsize(nextDoc);

        // Garbage collect every 10 MB.
        if (bytesSinceGC > (10 * 1024 * 1024)) {
            bytesSinceGC = 0;
            gc();
        }
    }
    return num;
},
	"shellPrint" : function() {
    try {
        var start = new Date().getTime();
        var n = 0;
        while (this.hasNext() && n < DBQuery.shellBatchSize) {
            var s = this._prettyShell ? tojson(this.next()) : tojson(this.next(), "", true);
            print(s);
            n++;
        }
        if (typeof _verboseShell !== 'undefined' && _verboseShell) {
            var time = new Date().getTime() - start;
            print("Fetched " + n + " record(s) in " + time + "ms");
        }
        if (this.hasNext()) {
            print("Type \"it\" for more");
            ___it___ = this;
        } else {
            ___it___ = null;
        }
    } catch (e) {
        print(e);
    }
},
	"pretty" : function() {
    this._prettyShell = true;
    return this;
}
}
